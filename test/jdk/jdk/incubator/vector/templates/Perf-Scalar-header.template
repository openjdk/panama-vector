/*
 * Copyright (c) 2018, 2022, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package org.openjdk.bench.jdk.incubator.vector.operation;

#warn This file is preprocessed before being compiled

import java.util.concurrent.TimeUnit;
import java.util.function.IntFunction;

import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.Blackhole;

@BenchmarkMode(Mode.Throughput)
@OutputTimeUnit(TimeUnit.MILLISECONDS)
@State(Scope.Benchmark)
@Warmup(iterations = 3, time = 1)
@Measurement(iterations = 5, time = 1)
@Fork(value = 1, jvmArgsPrepend = {"--add-modules=jdk.incubator.vector"})
public class $Type$Scalar extends AbstractVectorBenchmark {
    static final int INVOC_COUNT = 1; // To align with vector benchmarks.

    @Param("1024")
    int size;

    $type$[] fill(IntFunction<$Wideboxtype$> f) {
        $type$[] array = new $type$[size];
        for (int i = 0; i < array.length; i++) {
            array[i] = f.apply(i);
        }
        return array;
    }

    static $bitstype$ bits($type$ e) {
        return {#if[FP]?$Type$.$type$To$Bitstype$Bits(e):e};
    }

    $type$[] as, bs, cs, rs;
    boolean[] ms, mt, rms;
    int[] ss;

    @Setup
    public void init() {
        as = fill(i -> ($type$)(2*i));
        bs = fill(i -> ($type$)(i+1));
        cs = fill(i -> ($type$)(i+5));
        rs = fill(i -> ($type$)0);
        ms = fillMask(size, i -> (i % 2) == 0);
        mt = fillMask(size, i -> true);
        rms = fillMask(size, i -> false);

        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i,1)));
    }

    final IntFunction<$type$[]> fa = vl -> as;
    final IntFunction<$type$[]> fb = vl -> bs;
    final IntFunction<$type$[]> fc = vl -> cs;
    final IntFunction<$type$[]> fr = vl -> rs;
    final IntFunction<boolean[]> fm = vl -> ms;
    final IntFunction<boolean[]> fmt = vl -> mt;
    final IntFunction<boolean[]> fmr = vl -> rms;
    final IntFunction<int[]> fs = vl -> ss;

    static boolean eq($type$ a, $type$ b) {
        return a == b;
    }

    static boolean neq($type$ a, $type$ b) {
        return a != b;
    }

    static boolean lt($type$ a, $type$ b) {
        return a < b;
    }

    static boolean le($type$ a, $type$ b) {
        return a <= b;
    }

    static boolean gt($type$ a, $type$ b) {
        return a > b;
    }

    static boolean ge($type$ a, $type$ b) {
        return a >= b;
    }

#if[!FP]
    static boolean ult($type$ a, $type$ b) {
        return $Boxtype$.compareUnsigned(a, b) < 0;
    }

    static boolean ule($type$ a, $type$ b) {
        return $Boxtype$.compareUnsigned(a, b) <= 0;
    }

    static boolean ugt($type$ a, $type$ b) {
        return $Boxtype$.compareUnsigned(a, b) > 0;
    }

    static boolean uge($type$ a, $type$ b) {
        return $Boxtype$.compareUnsigned(a, b) >= 0;
    }
#end[!FP]

#if[BITWISE]
    static $type$ ROL_scalar($type$ a, $type$ b) {
#if[intOrLong]
        return $Wideboxtype$.rotateLeft(a, ((int)b));
#else[intOrLong]
#if[short]
        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));
#else[short]
        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));
#end[short]
#end[intOrLong]
    }

    static $type$ ROR_scalar($type$ a, $type$ b) {
#if[intOrLong]
        return $Wideboxtype$.rotateRight(a, ((int)b));
#else[intOrLong]
#if[short]
        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));
#else[short]
        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));
#end[short]
#end[intOrLong]
    }

    static $type$ TRAILING_ZEROS_COUNT_scalar($type$ a) {
#if[intOrLong]
        return $Wideboxtype$.numberOfTrailingZeros(a);
#else[intOrLong]
#if[short]
        return (short) (a != 0 ? Integer.numberOfTrailingZeros(a) : 16);
#else[short]
        return (byte) (a != 0 ? Integer.numberOfTrailingZeros(a) : 8);
#end[short]
#end[intOrLong]
    }

    static $type$ LEADING_ZEROS_COUNT_scalar($type$ a) {
#if[intOrLong]
        return $Wideboxtype$.numberOfLeadingZeros(a);
#else[intOrLong]
#if[short]
        return (short) (a >= 0 ? Integer.numberOfLeadingZeros(a) - 16 : 0);
#else[short]
        return (byte) (a >= 0 ? Integer.numberOfLeadingZeros(a) - 24 : 0);
#end[short]
#end[intOrLong]
    }

    static $type$ REVERSE_scalar($type$ a) {
#if[intOrLong]
        return $Wideboxtype$.reverse(a);
#else[intOrLong]
#if[short]
        $type$ b = ROL_scalar(a, ($type$) 8);
        b = (short)(((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));
        b = (short)(((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));
        b = (short)(((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));
        return b;
#else[short]
        $type$ b = ROL_scalar(a, ($type$) 4);
        b = (byte)(((b & 0x55) << 1) | ((b & 0xAA) >>> 1));
        b = (byte)(((b & 0x33) << 2) | ((b & 0xCC) >>> 2));
        return b;
#end[short]
#end[intOrLong]
    }
#end[BITWISE]
